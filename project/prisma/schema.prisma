generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(cuid())
  name  String
  email String  @unique
  image String
  hostedStreams Stream[] @relation("StreamHost")
  listeningTo   Stream[] @relation("StreamListeners")
  songs         Song[]   @relation("UserSongs")
  followers     Followers[] @relation("UserFollowers")
  following     Followers[] @relation("UserFollowing")
  comments      comments[] 
  lastSeen      DateTime?
}


model Playlist {
  id        String   @id @default(cuid())
  title     String
  songs     Song[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Listeners {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Followers {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  followers User[] @relation("UserFollowers")
  following User[] @relation("UserFollowing")
}

model Song {
  id        String   @id @default(cuid())
  title     String
  artist    String
  url       String
  thumbnail String
  votes     Int
  duration  Int
  addedAt   DateTime
  addedBy   User     @relation("UserSongs", fields: [addedById], references: [id])
  addedById String
  stream    Stream?  @relation("CurrentSong")
  streamId  String?  @unique
  queuedIn  Stream[] @relation("Queue")
  Playlist Playlist[]
}

model Stream {
  id          String   @id @default(cuid())
  title       String
  isActive    Boolean
  listeners   Int
  createdAt   DateTime @default(now())
  host        User     @relation("StreamHost", fields: [hostId], references: [id])
  hostId      String
  listners    User[]   @relation("StreamListeners")
  currentSong Song?    @relation("CurrentSong", fields: [currentSongId], references: [id])
  currentSongId String? @unique 
  queue       Song[]   @relation("Queue")
  comments comments[] @relation(name: "StreamComments")
}

model comments {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String
  stream      Stream @relation(fields: [streamId], references: [id], name: "StreamComments")
  streamId    String
}